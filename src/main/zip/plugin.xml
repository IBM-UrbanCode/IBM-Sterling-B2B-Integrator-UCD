<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 - Â© Copyright IBM Corporation 2014, 2016.
 - This is licensed under the following license.
 - The Eclipse Public 1.0 License (http://www.eclipse.org/legal/epl-v10.html)
 - U.S. Government Users Restricted Rights:  Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
-->
<plugin xmlns="http://www.urbancode.com/PluginXMLSchema_v1" xmlns:server="http://www.urbancode.com/PluginServerXMLSchema_v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <header>
    <identifier id="com.urbancode.air.plugin.sterlingb2bi" name="IBM Sterling B2Bi" version="@API_VERSION@"/>
    <description>The Sterling B2B Integrator plug-in enables access to common functionality for starting services and importing files.</description>
    <tag>Sterling/Automation</tag>
  </header>

  <step-type name="Start B2Bi">
    <description>Starts all B2B services, including all ASI services plus all adapter container(s) and the webDAV server</description>
    <properties>
      <!-- By making this property required, it must be filled in by the user in the UrbanCode Deploy UI. -->
      <property name="sterlingHome" required="true">
        <property-ui description="Full path to the Sterling home directory." label="Sterling Home" type="textBox" default-value="c:\IBM\SI"/>
      </property>
    </properties>
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>
    <!-- This command will be: python message.py ${PLUGIN_INPUT_PROPS} ${PLUGIN_OUTPUT_PROPS} -->
    <command program="${sterlingHome}/install/bin/startWindowsService.cmd">
    </command>
  </step-type>

  <step-type name="Stop B2Bi">
    <description>Stops all B2BI services, including all ASI services plus all adapter container(s) and the webDAV server</description>
    <properties>
      <!-- By making this property required, it must be filled in by the user in the UrbanCode Deploy UI. -->
      <property name="sterlingHome" required="true">
        <property-ui description="Full path to the Sterling home directory." label="Sterling Home" type="textBox"/>
      </property>
    </properties>
    <post-processing><![CDATA[
            properties.put("Status", "Success");
     ]]></post-processing>
    <!-- This command will be: python message.py ${PLUGIN_INPUT_PROPS} ${PLUGIN_OUTPUT_PROPS} -->
    <command program="${sterlingHome}/install/bin/stopWindowsService.cmd">
    </command>
  </step-type>

  <step-type name="Get Service Status">
    <description>Get the Status of service (up or done), by browse</description>
    <properties>
      <property name="testing_url">
        <property-ui default-value="http://localhost:30000" description="The hostname to check if the service is up" label="Testing URL" type="textBox"/>
      </property>
    </properties>
    <!-- This is the standard post processing script. It sets the step to Success if the exit code
    of the process was 0. Otherwise, the step fails. In order for a step to run correctly, it must
    have a post processing script and that post processing script must set the status property
    based off of the exit code. -->
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>
    <!--The syntax of the command element is such that each argument goes on its own line.
    The arg attribute can be "value", "path", or "file". So this command will be:
    ${GROOVY_HOME}/bin/groovy -cp src cmd.groovy ${PLUGIN_INPUT_PROPS} ${PLUGIN_OUTPUT_PROPS} -->
    <command program="${GROOVY_HOME}/bin/groovy">
      <arg value="-cp"/>
      <arg path="lib/groovy-plugin-utils-1.0.jar:lib/gson-2.2.4.jar"/>
      <arg file="serviceStatus.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>
  </step-type>

  <step-type name="Restart Windows Server">
    <description>Restart widnows server. Quit after the command submitted immediately. This method is also available in fully supported Windows System Tools plug-in.</description>
    <properties>
    </properties>
    <!-- This is the standard post processing script. It sets the step to Success if the exit code
    of the process was 0. Otherwise, the step fails. In order for a step to run correctly, it must
    have a post processing script and that post processing script must set the status property
    based off of the exit code. -->
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put(new java.lang.String("Status"), new java.lang.String("Failure"));
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>
    <!--The syntax of the command element is such that each argument goes on its own line.
    The arg attribute can be "value", "path", or "file". So this command will be:
    ${GROOVY_HOME}/bin/groovy -cp src cmd.groovy ${PLUGIN_INPUT_PROPS} ${PLUGIN_OUTPUT_PROPS} -->
    <command program="shutdown -r">
    </command>
  </step-type>

  <step-type name="Import MAPs">
    <description>Get the Status of service (up or done), by browse</description>
    <properties>
      <property name="sterlingHome">
        <property-ui default-value="c:/IBM/SI" description="Full path to the Sterling home directory." label="Sterling Home" type="textBox"/>
      </property>
      <property name="MAPs_dir">
        <property-ui description="Full path to the MAPs directory." label="MAPs Directory" type="textBox"/>
      </property>
    </properties>
    <!-- This is the standard post processing script. It sets the step to Success if the exit code
    of the process was 0. Otherwise, the step fails. In order for a step to run correctly, it must
    have a post processing script and that post processing script must set the status property
    based off of the exit code. -->
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put('Status', 'Failure');
        }
        else {
            //definethe regax to search here
            scanner.register("Error", function(lineNumber, line) {
                properties.put('Value', line);
                properties.put('lineNumber',lineNumber);

            });

            scanner.scan();   //search here

            var Value = properties.get('Value');
            if (Value == null) {
                properties.put('Status', 'Success');        //set the actual status of the result
            }
            else {
                properties.put('Status', 'Failure');
            }
        }
     ]]></post-processing>
    <!--The syntax of the command element is such that each argument goes on its own line.
    The arg attribute can be "value", "path", or "file". So this command will be:
    ${GROOVY_HOME}/bin/groovy -cp src cmd.groovy ${PLUGIN_INPUT_PROPS} ${PLUGIN_OUTPUT_PROPS} -->
    <command program="${sterlingHome}/install/bin/importMAPs.cmd">
      <arg value="${MAPs_dir}"/>
    </command>
  </step-type>

  <step-type name="Install or Uninstall Third-Party Jars">
    <description>install/uninstall third-party Jars</description>
    <properties>
      <property name="sterlingHome">
        <property-ui default-value="c:/IBM/SI" description="Full path to the Sterling home directory." label="Sterling Home" type="textBox"/>
      </property>
      <property name="filelist">
        <property-ui description="Full path to a folder containing jars to install or uninstall. For Example: C:/tmp/apach*.jar" label="Jars Folder" type="textBox"/>
      </property>
      <property name="vendorName" required="true">
        <property-ui description="The name of vendor of the installed Jars. For example: 'weblogic'" label="Vendor Name" type="textBox"/>
      </property>
      <property name="vendorVersion" required="true">
        <property-ui description="The version of the vendor's product. For example: '12.1.2'" label="Vendor Version" type="textBox"/>
      </property>
      <property name="targetJVMOptions" required="false">
        <property-ui default-value="NO" description="Select if you want to make this new JAR available
            to the Application Server and Agent when running this step." label="Target JVM options" type="selectBox"/>
        <value label="NO">NO</value>
        <value label="EVERY">EVERY</value>
        <value label="NOWHERE">NOWHERE</value>
        <value label="DCL">DCL</value>
        <value label="OPS">OPS</value>
        <value label="DCL">DCL</value>
        <value label="APP">APP</value>
        <value label="AGENT">AGENT</value>
        <value label="ACTIVEMQ">ACTIVEMQ</value>
      </property>
      <property name="uninstall" required="true">
        <property-ui default-value="NO" description="Select to uninstall the chosen Jars. Ignore if installing." label="Uninstall" type="checkBox"/>
      </property>
      <property name="nodeploy" required="true">
        <property-ui description="Select to not deploy the Jars. Ignore if deploying." label="Do Not Deploy" type="checkBox"/>
      </property>
    </properties>
    <!-- This is the standard post processing script. It sets the step to Success if the exit code
    of the process was 0. Otherwise, the step fails. In order for a step to run correctly, it must
    have a post processing script and that post processing script must set the status property
    based off of the exit code. -->
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put('Status', 'Failure');
        }
        else {
            //definethe regax to search here
            scanner.register("Error", function(lineNumber, line) {
                properties.put('Value', line);
                properties.put('lineNumber',lineNumber);

            });

            scanner.scan();   //search here

            var Value = properties.get('Value');
            if (Value == null) {
                properties.put('Status', 'Success');        //set the actual status of the result
            }
            else {
                properties.put('Status', 'Failure');
            }
        }
     ]]></post-processing>
    <!--The syntax of the command element is such that each argument goes on its own line.
    The arg attribute can be "value", "path", or "file". So this command will be:
    ${GROOVY_HOME}/bin/groovy -cp src cmd.groovy ${PLUGIN_INPUT_PROPS} ${PLUGIN_OUTPUT_PROPS} -->
    <command program="${GROOVY_HOME}/bin/groovy">
      <arg value="-cp"/>
      <arg path="lib/groovy-plugin-utils-1.0.jar:lib/gson-2.2.4.jar"/>
      <arg file="install3rdPartyJars.groovy"/>
      <arg file="${PLUGIN_INPUT_PROPS}"/>
      <arg file="${PLUGIN_OUTPUT_PROPS}"/>
    </command>


  </step-type>

  <step-type name="Import Batch File">
    <description>Get the Status of service (up or done), by browse</description>
    <properties>
      <property name="sterlingHome">
        <property-ui default-value="c:/IBM/SI" description="Full path to the Sterling home directory." label="Sterling Home" type="textBox"/>
      </property>
      <property name="importBatchFile">
        <property-ui description="Batch File to be import" label="Import Batch File" type="textBox"/>
      </property>
      <property name="reportFileName">
        <property-ui description="File name to send the import report to." label="Report File Name" type="textBox"/>
      </property>
    </properties>
    <!-- This is the standard post processing script. It sets the step to Success if the exit code
    of the process was 0. Otherwise, the step fails. In order for a step to run correctly, it must
    have a post processing script and that post processing script must set the status property
    based off of the exit code. -->
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put('Status', 'Failure');
        }
        else {
            properties.put('Status', 'Success');

            //definethe regax to search here
            scanner.register("Failed", function(lineNumber, line) {
                properties.put('Value', line);
                properties.put('lineNumber',lineNumber);

            });

            scanner.scan();   //search here

            var Value = properties.get('Value');
            if (Value != null) {
                properties.put('Status', 'Failure');
            }


        }
     ]]></post-processing>
    <!--The syntax of the command element is such that each argument goes on its own line.
    The arg attribute can be "value", "path", or "file". So this command will be:
    ${GROOVY_HOME}/bin/groovy -cp src cmd.groovy ${PLUGIN_INPUT_PROPS} ${PLUGIN_OUTPUT_PROPS} -->
    <command program="${sterlingHome}/install/tp_import/import.cmd">
      <arg value="-batch"/>
      <arg value="${importBatchFile}"/>
      <arg value="-report"/>
      <arg value="${reportFileName}"/>
    </command>
  </step-type>

    <step-type name="Assemble Import Batch File">
        <description>Assemble a import batch for the batch file import. It will add one line for one xml file in XML folder, and append it to a importBatchFile, which will be created if not existing.</description>
        <properties>
          <property name="importBatchFile" required="true">
            <property-ui description="Full path to the Batch File to be create." label="Batch File" type="textBox"/>
          </property>
          <property name="xmlFolder" required="true">
            <property-ui description="Path to the imported XML Folder." label="XML Folder" type="textBox"/>
          </property>
          <property name="tagName" required="true">
            <property-ui description="The resource tag to give the imported files." label="Resource Tag" type="textBox"/>
          </property>
          <property name="numberOfThreads" required="false">
            <property-ui default-value="1" description="Assign the process a number of threads to use." label="Number Of Threads" type="textBox"/>
          </property>
          <property name="password" required="false">
            <property-ui default-value="password" description="If process is secured, enter the required password. Default value is 'password'" label="Password" type="secureBox"/>
          </property>
        </properties>
        <post-processing><![CDATA[
            if (properties.get("exitCode") != 0) {
                properties.put('Status', 'Failure');
            }
            else {
                //definethe regax to search here
                scanner.register("Error", function(lineNumber, line) {
                    properties.put('Value', line);
                    properties.put('lineNumber',lineNumber);

                });

                scanner.scan();   //search here

                var Value = properties.get('Value');
                if (Value == null) {
                    properties.put('Status', 'Success');        //set the actual status of the result
                }
                else {
                    properties.put('Status', 'Failure');
                }
            }
         ]]></post-processing>
        <!--The syntax of the command element is such that each argument goes on its own line.
        The arg attribute can be "value", "path", or "file". So this command will be:
        ${GROOVY_HOME}/bin/groovy -cp src cmd.groovy ${PLUGIN_INPUT_PROPS} ${PLUGIN_OUTPUT_PROPS} -->
        <command program="${GROOVY_HOME}/bin/groovy">
          <arg value="-cp"/>
          <arg path="lib/groovy-plugin-utils-1.0.jar:lib/gson-2.2.4.jar"/>
          <arg file="assembleBatchFile.groovy"/>
          <arg file="${PLUGIN_INPUT_PROPS}"/>
          <arg file="${PLUGIN_OUTPUT_PROPS}"/>
        </command>


    </step-type>


  <step-type name="Add Workflow">
    <description>Add workflow using addWorkflow.cmd</description>
    <properties>
      <property name="sterlingHome">
        <property-ui default-value="c:/IBM/SI" description="Full path to the Sterling home directory." label="Sterling Home" type="textBox"/>
      </property>
      <property name="options">
        <property-ui default-value="-s -S -U -X" description="Enter any number of the options to modify the new workflow." label="Options"  type="textBox"/>
      </property>
      <property name="xmlFile">
        <property-ui description="Full path to the XML File being added to the Workflow." label="Import XML File" type="textBox"/>
      </property>
    </properties>
    <!-- This is the standard post processing script. It sets the step to Success if the exit code
    of the process was 0. Otherwise, the step fails. In order for a step to run correctly, it must
    have a post processing script and that post processing script must set the status property
    based off of the exit code. -->
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put('Status', 'Failure');
        }
        else {
            //definethe regax to search here
            scanner.register("Error", function(lineNumber, line) {
                properties.put('Value', line);
                properties.put('lineNumber',lineNumber);

            });

            scanner.scan();   //search here

            var Value = properties.get('Value');
            if (Value == null) {
                properties.put('Status', 'Success');        //set the actual status of the result
            }
            else {
                properties.put('Status', 'Failure');
            }
        }
     ]]></post-processing>
    <!--The syntax of the command element is such that each argument goes on its own line.
    The arg attribute can be "value", "path", or "file". So this command will be:
    ${GROOVY_HOME}/bin/groovy -cp src cmd.groovy ${PLUGIN_INPUT_PROPS} ${PLUGIN_OUTPUT_PROPS} -->
    <command program="${sterlingHome}/install/bin/addworkflow.cmd">
      <arg value="${options}"/>
      <arg value="-f"/>
      <arg value="${xmlFile}"/>
    </command>
  </step-type>

  <step-type name="Apply Configurations">
    <description>Apply configuration files using setupfiles.cmd</description>
    <properties>
      <property name="sterlingHome">
        <property-ui default-value="c:/IBM/SI" description="Full path to the Sterling home directory." label="Sterling Home" type="textBox"/>
      </property>
    </properties>
    <!-- This is the standard post processing script. It sets the step to Success if the exit code
    of the process was 0. Otherwise, the step fails. In order for a step to run correctly, it must
    have a post processing script and that post processing script must set the status property
    based off of the exit code. -->
    <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put('Status', 'Failure');
        }
        else {
            //definethe regax to search here
            scanner.register("Error", function(lineNumber, line) {
                properties.put('Value', line);
                properties.put('lineNumber',lineNumber);

            });

            scanner.scan();   //search here

            var Value = properties.get('Value');
            if (Value == null) {
                properties.put('Status', 'Success');        //set the actual status of the result
            }
            else {
                properties.put('Status', 'Failure');
            }
        }
     ]]></post-processing>
    <!--The syntax of the command element is such that each argument goes on its own line.
    The arg attribute can be "value", "path", or "file". So this command will be:
    ${GROOVY_HOME}/bin/groovy -cp src cmd.groovy ${PLUGIN_INPUT_PROPS} ${PLUGIN_OUTPUT_PROPS} -->
    <command program="${sterlingHome}/install/bin/setupfiles.cmd">
    </command>
  </step-type>
</plugin>
